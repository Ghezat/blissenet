<!DOCTYPE html>
<html lang="en">

<head>

    <%- include('../partials/head.ejs') %>
    <link rel="stylesheet" href="/toastr/toastr.min.css"> <!-- tiene que despues del CDN de bootstrap -->
    <script src="/toastr/toastr.min.js"></script>
    <title>Blissenet Shopping-Cart Admin </title>

</head>
<style>


    .toast-success {
        /* Esta clase es unicamente para dar color al alert toastr de tipo success que debe ser violeta */
        background-color: #6f42c1; /* Azul tirando a morado */
        color: white; /* Color del texto */
    } 

    .textLight{
    /* trabaja en conjunto con themaTextLight */
    color: white;
    }

    @media screen and (min-width: 290px) and (max-width: 499px ){

    
    }

</style>

<body class="mainTheme" style="max-width: 100vw; min-height: 100vh;">
    <main class="themaTextLight" style="max-width: 100% !important;">

        <%- include('../partials/navi-simple.ejs') %>

        
        <%# if (catchError){ %>
            <%#- include('../alert/catchError.ejs') %> 
        <%# }; %>


        <% if (user) { %>

            <% const seeMarket = user.seeMarket %>
            <% const idUser = user._id %>
            <input type="hidden" value="<%= seeMarket.countryMarketCode %>" id="seeMarket">
            <input type="hidden" value="<%= idUser %>" id= "idUser">
            <!-- este bloque me permite validad si el usuario que se logea tiene un meercado definido. sino lo tiene debe obligatoriamente hacerlo. --> 

            <div class="container-fluid d-flex justify-content-start py-2" style="background: linear-gradient(90deg, rgba(146,0,255,1) 0%, rgba(174,65,255,1) 50%, rgba(13,110,253,1) 100%);">
                <span class="ms-2 p-0" style="font-weight: 400; color: #ffde00;"> <b> Administración de Carritos </b>  </span>
            </div>    
            
            <div class="container-fluid p-0">
                            
            
                <div class="ShoppingCart-Admin p-0">
                        
                    <% const username = user.username %>
                    <% const indexed = user._id %> <!-- esto es igual al id user -->

                    <% if (searchProfile) {  %> <!-- cuenta con perfil -->
                        
                        <div class="content_search">

                            <div class="row d-flex justify-content-around m-0 " style="background-color:rgba(217, 223, 223, 0.2);">
                
                                <div class="col-lg-4 col-md-4 col-sm-12 col-12 p-0 my-4 rounded-2"  style="background-color: rgba(209, 209, 209, 0.2)">

                                    <div class="contentainer-fluid ">

                                            
                                        <div class="card-header">
                                            <span style="font-size: 18px;">Carrito de Compra</span>
                                        </div>
                                        <div class="card-body">

                                            <div class="requests mb-3">
                                                <span style="font-size: 16px;"> Solicitudes:  <span class="bg-secondary text-light rounded-3 px-2 ms-3"> <%= sumCount %> </span>   </span> 
                                            </div>
                                            

                                            <% if (sumCount !==0){ %>

                                                
                                                    <% shoppingCartPending.forEach((ele)=>{  %>
                                                        <% const iDCart = ele._id %>
                                                        <% const customerName = ele.customerName %>
                                                        <% const date = ele.date %>
                                                        <% const amount = ele.amount %>
                                                        <% const boxShoppingCart = ele.boxShoppingCart %>
                                                        <% const purchaseReceiver = ele.purchaseReceiver %>
                                                        <% const deliveryOptions = ele.deliveryOptions %>
                                                        <% const consolidate = ele.consolidate %>
                                                        <% const regPay = ele.regPay %>
                                                        <% const dataRegPay = ele.dataRegPay %>
                                                        <% const paid = ele.paid %>
                                                        <% const sent = ele.sent %>
                                                        <% const received = ele.received %>
                                                        <% const commentBuy =  ele.CommentBuy %>
                                                        <% const ratingBuy =  ele.ratingBuy %>
                                                         

                                                        
                                                        <div class="listCart d-flex justify-content-between border rounded-2 mb-1 cursor-pointer" style="font-size: 16px;">
                                                            <input type="hidden" class="iDCart" value="<%= iDCart %>"> 
                                                            <input type="hidden" class="customerNameData" value="<%= customerName %>">
                                                            <input type="hidden" class="amount" value="<%= amount %>">  
                                                            <input type="hidden" class="boxShoppingCartData" value="<%=  JSON.stringify(boxShoppingCart) %>">
                                                            <input type="hidden" class="purchaseReceiverData" value="<%=  JSON.stringify(purchaseReceiver) %>"> 
                                                            <input type="hidden" class="deliveryOptions" value="<%= deliveryOptions %>">
                                                            <input type="hidden" class="consolidate" value="<%= consolidate %>">
                                                            <input type="hidden" class="regPay" value="<%= regPay %>">
                                                            <input type="hidden" class="dataRegPay" value="<%= JSON.stringify(dataRegPay) %>"> 
                                                            <input type="hidden" class="paid" value="<%= paid %>">
                                                            <input type="hidden" class="sent" value="<%= JSON.stringify(sent) %>">
                                                            <input type="hidden" class="received" value="<%= received %>">
                                                            <input type="hidden" class="commentBuy" value="<%= commentBuy %>">
                                                            <input type="hidden" class="ratingBuy" value="<%= ratingBuy %>">
                                                            

                                                            <div class="listLeft">
                                                                <img src="/img/iconCartBuyes.png" alt="" style="width: 35px; height: 35px;">
                                                                <span class="me-1"><%= customerName  %></span> <span class="px-2 rounded-3" style="white-space: nowrap"> <i class="bi bi-currency-dollar"></i>(<%= amount  %>)</span> 
                                                            </div> 

                                                            <div class="listRight d-flex align-items-center">
                                                                <span class="me-2 bg-light rounded-3 px-2 text-dark shadow-sm" style="font-size: 14px; white-space: nowrap">
                                                                   <i><%= date %></i> 
                                                                </span>
                                                            </div>
                                                            
                                                        </div>    
                                                    <% }); %>    
                                                
                                         
                                            <% } else { %>
                                                 <span class="rounded-3 p-2" style="background-color: rgba(0, 0, 0, 0.1);">No hay carritos pendientes</span>
                                            <% }; %>    

                                        
                                        </div>
                                        

                        
                                    </div>

                                </div>

                                <div class="col-lg-7 col-md-7 col-sm-12 col-12 p-0 my-4 rounded-2"  style="background-color: rgba(209, 209, 209, 0.2)">

                                    <div class="contentainer-fluid">

                                            <div class="card-header">
                                               <span style="font-size: 18px;">Datos y Lista de Compra</span>
                                            </div>    
                                            <div class="card-body">

                                                <% if (sumCount !==0){ %>
                                                    <div class="containerAlertSelect">
                                                        <div class="alert" style="background-color: rgb(0, 0, 0, 0.1); font-size: 16px;">
                                                            <p>¡ Seleccione un carrito de compra !</p>
                                                        </div>
                                                    </div>
                                                <% } else { %>
                                                    <div class="containerImageSinResultados d-flex justify-content-center p-5">
                                                        <img src="/img/sinResultados.png" style="width: 200px;">
                                                    </div>
                                                <% }; %>

                                                <div class="CUSTOMERName rounded-3 text-light mb-2" style="font-size: 18px;">
                                                    <!-- dato inyectado dinamicamente -->
                                                </div>
                                                
                                                <div class="tableAddress close">
                                                    <table class="table themaTextLight">
                                                        <thead>
                                                            <tr>
                                                                <th>Descrip.</th> <th>Cant.</th> <th style="white-space: nowrap;">P. Unit.</th> <th>Total</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody class="listShoppingCart">
                                                            <!-- tabla dinamica -->
                                                        </tbody>
                                                        <tfoot style="font-size: 16px; background-color: rgb(0, 0, 0, 0.1);">
                                                            <tr>
                                                                <th colspan="3">Total a Pagar ..........</th>
                                                                <th><span class="totalPayDinamic"> </span></th>
                                                            </tr>
                                                        </tfoot>
                                                    </table>
                                                    
                                                    <div class="form-group my-2 d-flex flex-wrap" style="font-size: 16px;">
                                                        <span class="me-2 rounded-pill px-3 py-2 mb-2" style="background-color: rgba(0, 0, 0, 0.1); white-space: nowrap;"> <b>Nombre: </b> <span class="clientNames"></span>  </span> 
                                                        <span class="me-2 rounded-pill px-3 py-2 mb-2" style="background-color: rgba(0, 0, 0, 0.1); white-space: nowrap;"> <b>Documento: </b> <span class="clientDocument"></span> </span>
                                                        <span class="me-2 rounded-pill px-3 py-2 mb-2" style="background-color: rgba(0, 0, 0, 0.1); white-space: nowrap;"> <b>Teléfono:</b> <span class="clientPhone"></span> </span>
                                                    </div>

                                                    <div class="form-group my-0 px-3 py-2 mb-3" style="font-size: 16px; background-color: rgba(0, 0, 0, 0.1); width: auto; border-radius: 10px;">
                                                        <span style="white-space: 16px;"> <b>Dirección:</b> <span class="clientAddress"></span> </span>
                                                    </div>
                                                </div>    

                                                <div class="containerDelivery form-group my-0 px-3 py-2 mb-3 close" style="font-size: 16px; background-color: rgba(0, 0, 0, 0.1); width: auto; border-bottom-left-radius: 0; border-bottom-right-radius: 0; border-top-left-radius: 9px; border-top-right-radius: 9px;">
                                                    <span style="white-space: 16px;"> <b>Delivery:</b> </span> <span class="delivery bg-secondary text-light rounded-pill ms-1 px-3 py-1" style="white-space: nowrap;"> </span> 
                                                </div>                                                  

                                                <div class="btnDeclineConsolide close pb-2" style="width: 100%; background-color: rgba(0, 0, 0, 0.1); width: auto; border-bottom-left-radius: 9px; border-bottom-right-radius: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px;">
                                                    <div class="d-flex justify-content-between p-3" style="font-size: 20px;">
                                                        <button type="button" class="btn btn-danger rounded-pill py-2 px-4 btnDelete" style="width: 45%;">  <b> <i class="bi bi-x-circle me-1"></i> Eliminar </b>  </button>
                                                        <button type="button" class="btn btn-primary rounded-pill py-2 px-4 btnConsolidate" style="width: 45%;"> <b> <i class="bi bi-check-circle me-1"></i> Consolidar </b> </button>
                                                    </div>
                                                </div>

                                                <div class="dataRegisterPay close pb-2 mb-2" style="background-color: rgba(0, 0, 0, 0.1); width: 100%; font-size: 15px; border-bottom-right-radius: 9px; border-bottom-left-radius: 9px;">
                                                    <div class="insertDataRegistePay">
                                                       <!--  datos dinamico -->
                                                    </div>
                                                    <div class="btnOptions close">
                                                        <div class="d-flex justify-content-between p-3" style="font-size: 20px;">
                                                            <button class="btn btn-danger rounded-pill py-2 px-4 btnDecline" style="width: 45%;"> <b> <i class="bi bi-x-circle me-1"></i> Declinar </b>  </button>
                                                            <button class="btn btn-primary rounded-pill py-2 px-4 btnApprove" style="width: 45%;"> <b> <i class="bi bi-check-circle me-1"></i> Aprobar </b>  </button>
                                                        </div>
                                                    </div>
                                                    <div class="controlSent close">
                                                        <div class="card-header">Declare cuando haya enviado a su cliente.</div>
                                                        <div class="d-flex justify-content-between p-3 form-group" style="font-size: 20px;">
                                                            <textarea class="form-control sentDetails" placeholder="Deje aqui un detalle del envio si lo requiere." maxlength="200"></textarea>
                                                            <button class="btn btn-primary rounded-2 py-2 px-4 sentBtn" style="width: 45%;"> <b> <i class="bi bi-check-circle me-1"></i> Enviado </b>  </button>
                                                        </div>
                                                    </div>   
                                                    <div class="controlReceived form-group close">
                                                        <div class="card-header">Califique y deje un comentario a su cliente.</div>
                                                        <div class="p-3 form-group" style="font-size: 20px;">
                                                            <div class="row m-0">
                                                                <div class="col-xl-8 col-lg-8 col-md-7 col-sm-12 p-0">
                                                                    <textarea class="form-control comment" maxlength="500" placeholder="Deje aqui un comentario a su Cliente."></textarea>
                                                                </div>
                                                                <div class="col-xl-4 col-lg-4 col-md-5 col-sm-12 p-0" style="background-color: rgb(108, 117, 125, 0.8);">
                                                                    <div class="contentToolStart d-flex py-2">
                                                                        <div class="containRateStar d-flex justify-content-center" style="width: 100%;">
                                                                            <i class="starE bi bi-star-fill mx-2" data-star="1" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i>
                                                                            <i class="starE bi bi-star mx-2" data-star="2" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i>
                                                                            <i class="starE bi bi-star mx-2" data-star="3" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i>
                                                                            <i class="starE bi bi-star mx-2" data-star="4" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i>
                                                                            <i class="starE bi bi-star mx-2" data-star="5" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i> 
                                                                        </div> 
                                                                    </div>
                                                                </div>

                                                            </div>  
                                                            <button class="btn btn-primary form-control my-3 commentRating">Enviar Calificación y Comentario</button>  
                                                        </div>
                                                    </div>                                                                                                           
                                                    
                                                </div>


                                            </div>
                        
                                    </div>

                                </div>

                            </div>

                        </div>  


                        <div class="card mt-1" style="background-color:rgba(217, 223, 223, 0.2);">
                            <div class="card-body d-flex justify-content-center ">
                                <a href="/" class="text-decoration-none" style="color: inherit">  <span id="logoBlissenet_com"> </span> </a> 
                            </div>
                        </div>
                        
                        <!-- Modal Shopping-cart --> <!--lo activa > data-bs-toggle="modal" data-bs-target="#staticSuicheSegment" -->
                        <div class="modal fade" id="staticCheckSearch" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabelH2" aria-hidden="true">
                            <div class="modal-dialog border border-secondary p-2 rounded-3" style="background-color: rgb(0, 0, 0, 0.3);">
                                <div class="modal-content text-dark">

                                    <div class="modal-header">
                                        <h5 class="modal-title" id="staticBackdropLabelH2">Carrito de Compras</h5>
                                        <i class="bi bi-x-lg cursor-pointer" data-bs-dismiss="modal"></i>
                                    </div>
                                    <div class="modal-body">
                                        <p><span class="fw-bold text-primary">Agrega un Carrito de Compras. </span>
                                            "¡Aprovecha esta función para facilitar las compras de tus clientes!, ofrece esta herramienta para que puedan
                                                hacer una compra de varios articulos con un solo pago."
                                        </p>
                                        <p> <span class="bg-dark py-1 px-2 rounded-2"> <b class="text-info">Requerimento : + 1 Anuncios</b>  </span> </p>
                                    </div>
                                    <div class="modal-footer" style="background-image: url('/img/bannerShoopingCart.jpg'); background-size: cover; background-position: center;">
                                        <button type="button" class="btn btn-dark" data-bs-dismiss="modal">Cerrar</button>
                                    </div>
                                </div>
                            </div>
                        </div> 
                        
                    <% } else { %> <!-- cuenta sin perfil -->

                    <% } %>                                                        

                                    
                </div>
    

            </div>



         <% } else { %>
            <div class="container-fluid d-flex justify-content-center p-3" style="height: 90%; width: 100%; background-color:  rgb(243, 238, 238); box-shadow: 1px 1px 5px 1px rgb(99, 98, 98);  border-top: 2px ridge  rgb(243, 238, 238);">
               
                <%- include('../partials/noLogin.ejs') %>

            </div>  
         <% }; %>

    </main>
        <%- include('../partials/scripts.ejs') %>
        <%- include('../partials/scriptsOnlyNavi-simpleNoIcons.ejs') %>
        <!-- este cnd es el constructor de QR  se encuentra en https://cdnjs.com/libraries/qrious -->
        <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script> esta sirve tambien pero deje la de abajo, no se cual es la diferencia entre ambas pero este es la cdn para crear los QR-->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js" integrity="sha512-pUhApVQtLbnpLtJn6DuzDD5o2xtmLJnJ7oBoMsBnzOkVkpqofGLGPaBJ6ayD2zQe3lCgCibhJBi4cj5wAxwVKA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
       

</body>

<script>
    const listCart = document.querySelectorAll('.listCart');
    const iDCart = document.querySelectorAll('.iDCart');
    const customerNameData = document.querySelectorAll('.customerNameData');
    const amount = document.querySelectorAll('.amount');
    const boxShoppingCartData = document.querySelectorAll('.boxShoppingCartData'); 
    const purchaseReceiverData = document.querySelectorAll('.purchaseReceiverData');
    const deliveryOption = document.querySelectorAll('.deliveryOptions');
    const consolidateData = document.querySelectorAll('.consolidate'); // "true" or "false"
    const regPayData = document.querySelectorAll('.regPay'); // "true" or "false"
    const dataRegPay = document.querySelectorAll('.dataRegPay');
    const paid = document.querySelectorAll('.paid');
    const sent = document.querySelectorAll('.sent'); //esto es un objeto
    const received = document.querySelectorAll('.received');
    const commentBuy = document.querySelectorAll('.commentBuy');
    const ratingBuy = document.querySelectorAll('.ratingBuy'); 

    //para inyectar  
    const CUSTOMERName = document.querySelector('.CUSTOMERName');
    const listShoppingCart = document.querySelector('.listShoppingCart');
    const totalPayDinamic = document.querySelector('.totalPayDinamic');

    const containerAlertSelect = document.querySelector('.containerAlertSelect');
    const containerDelivery = document.querySelector('.containerDelivery');
    const deliverySpan = document.querySelector('.delivery');
    const clientNamesSpan = document.querySelector('.clientNames');
    const clientDocumentSpan = document.querySelector('.clientDocument');
    const clientPhoneSpan = document.querySelector('.clientPhone');
    const clientAddressSpan = document.querySelector('.clientAddress');

    const tableAddress = document.querySelector('.tableAddress'); //esto es un contenedor que tiene la tabla y los campos del cliente que lo recibe y su direccion
    const dataRegisterPay = document.querySelector('.dataRegisterPay'); //contenedor que muestra el metodo de pago y detalle del pago
    const insertDataRegistePay = document.querySelector('.insertDataRegistePay'); //contenedor donde inyectamos los datos de pago
    const btnOptions = document.querySelector('.btnOptions'); //aqui en donde estan los dos botones de Declinar y Aprobar
    const btnDeclineConsolide = document.querySelector('.btnDeclineConsolide'); //botones consolidar y eliminar.
    const controlSent = document.querySelector('.controlSent'); //contenedor boton de enviado y textarea para colocar detalle del envio si lo requiere
    const controlReceived = document.querySelector('.controlReceived'); //contenedor donde se califica y comenta al cliente

    const btnDecline = document.querySelector('.btnDecline');
    const btnApprove = document.querySelector('.btnApprove');

    const sentDetails = document.querySelector('.sentDetails');
    const sentBtn = document.querySelector('.sentBtn'); 
 
    let iDDinamic; //variable de id del articulo.
    let departDinamic; //variable de departamento del articulo.
    let titleDinamic; //variable del titulo del articulo.
    let amountDinamic; //variable de cantidad requerida por el cliente.
    let priceDinamic; //variable del precio del articulo.
    let totalDinamic; //variable del total del articulo. 
    let datos; //datos del boxShopping que peude ser el original o el actualizado si se llegara a cambiar alguna cantidad.
    let boxConsolidate; //variable que contendra un objeto que poseera toda la informacion real de lo que se puede despachar.
    let IDCart; //variable global 

    listCart.forEach((ele, i)=>{

        ele.addEventListener('click', ()=>{
            console.log("Valor del id del carrito :", ele);
            console.log(iDCart[i].value);
            IDCart = iDCart[i].value;
            const clientName = customerNameData[i].value;
            const receiverTxt = purchaseReceiverData[i].value; 
            const receiver = JSON.parse(receiverTxt);
            const Amount = amount[i].value;
            const deliveryOpt = deliveryOption[i].value; 
            const ConsolidateData = consolidateData[i].value;
            const RegPayData = regPayData[i].value;
            const DataRegPay = dataRegPay[i].value;
            const dataRegister = JSON.parse(DataRegPay);
            const Paid = paid[i].value;
            const sentV = sent[i].value;
            const Sent = JSON.parse(sentV);
            const Received = received[i].value;
            const CommentBuy = commentBuy[i].value;
            const RatingBuy = ratingBuy[i].value; 

            //console.log("receiver..........:", receiver);
            //console.log("deliveryOpt.......:", deliveryOpt);
            console.log("ConsolidateData.....:", ConsolidateData);
            console.log("RegPayData..........:", RegPayData); 
            console.log("Paid..........:", Paid); 
            console.log("CommentBuy.......:", CommentBuy);
            console.log("RatingBuy.......:", RatingBuy);

            containerAlertSelect.classList.add('close');
            tableAddress.classList.remove('close');
            

            let DeliveryOption;

            if (deliveryOpt === "D01"){
                DeliveryOption = "Retiro en Tienda."
            } else if (deliveryOpt === "D02"){
                DeliveryOption = "Entrega en lugar acordado."
            } else {
                DeliveryOption = "Delivery en la puerta del cliente."
            }

            console.log("-------------------ver--------------------")
            console.log("dataRegister..............:", dataRegister); //esto es un array

            if (dataRegister.length > 0){

                const lastIndexRegister = dataRegister.length -1; //porque em da error y dice que length no es una funcion ?
                console.log("lastIndexRegister.........:", lastIndexRegister); //shopping-cart-admin:867 Uncaught TypeError: dataRegister.length is not a function

                const methodPay = dataRegister[lastIndexRegister].methodPay;
                const detailPay = dataRegister[lastIndexRegister].detailPay;

            }

            const clientNames = receiver.clientName;
            const clientIndentification = receiver.clientIndentification;
            const clientPhone = receiver.clientPhone;
            const clientAddress = receiver.clientAddress; 

            
            const boxShopping = boxShoppingCartData[i].value;
            let arrayParse = JSON.parse(boxShopping);
            console.log("boxShopping original:", arrayParse);
                       

            datos = {
                iDCart : IDCart,
                clientName : clientName,
                boxShopping : arrayParse,
                total : Amount
            }
            boxConsolidate = datos;

            //aqui ahora inyectamos los datos ...................................................
        
            CUSTOMERName.innerHTML =   `<div class="bg-light rounded-pill text-secondary" style="height: auto; width: auto">        
                                            <img src="/img/iconCartBuyes.png" alt="" style="width: 30px; height: 30px;">
                                            <span class="ms-2"> <b> ${clientName} </b> </span> 
                                            <span class="ms-2 text-secondary" style="font-size : 15px">  <b> <i class="bi bi-currency-dollar"></i>  ${Amount}  </b>  </span> 
                                        </div>`
             
            //{depart: 'items', id: '68a087e3f91f4e94c93be043', title: 'Sala de Tomate Pampero 397gr.', price: '2.35', countRequest: 1} 

            listShoppingCart.innerHTML =""; //limpiamos el body
            arrayParse.forEach((ele)=>{
                        const total = (ele.countRequest * ele.price).toFixed(2);

                        if (ConsolidateData === "false" && RegPayData ==="false"){

                            if (ele.presentation == "fraction"){
                                listShoppingCart.innerHTML += `                                                       
                                                        <tr> 
                                                            <td> ${ele.title} </td> <td> <input class="amountDinamic" type="number" step=0.01 min="0" style="width: 50px" value="${ele.countRequest}"> </td> <td class="priceDinamic"> ${ele.price} </td> <td class="totalDinamic"> ${total} </td>
                                                        </tr> 
                                                `
                            } else {
                                listShoppingCart.innerHTML += `                                                       
                                                        <tr> 
                                                            <td> ${ele.title} </td> <td> <input class="amountDinamic" type="number" step=1 min="0" style="width: 50px" value="${ele.countRequest}"> </td> <td class="priceDinamic"> ${ele.price} </td> <td class="totalDinamic"> ${total} </td>
                                                        </tr> 
                                                `
                            }
                                    

                        } else {

                                listShoppingCart.innerHTML += `                                                       
                                                        <tr>  
                                                            <td> ${ele.title} </td> <td class="amountDinamic"> ${ele.countRequest} </td> <td class="priceDinamic"> ${ele.price} </td> <td class="totalDinamic"> ${total} </td>
                                                        </tr> 
                                                        `
                        }   
            })

            containerDelivery.classList.remove("close"); //hacemos aparecer el contenedor.
            deliverySpan.innerText = DeliveryOption            
            clientNamesSpan.innerText = clientNames;
            clientDocumentSpan.innerText = clientIndentification;
            clientPhoneSpan.innerText = clientPhone;
            clientAddressSpan.innerText = clientAddress;

            amountDinamic = document.querySelectorAll(".amountDinamic");
            priceDinamic = document.querySelectorAll(".priceDinamic");
            totalDinamic = document.querySelectorAll(".totalDinamic");


            //aqui calculamos el total a pagar sin cambiar datos de cantidad, que es el total original.......
                let totalPayOriginal = 0;
                amountDinamic.forEach((ele, i) => {

                    const total = Number(totalDinamic[i].textContent.trim());

                    // Sumar el total a totalPay
                    totalPayOriginal += total;
                });
                console.log("totalPayOriginal............. :", totalPayOriginal)
                totalPayDinamic.innerHTML = `<span style="white-space: nowrap"> <i class="bi bi-currency-dollar"></i>${totalPayOriginal.toFixed(2)} </span>`;
            // ----------------------------------------------------


            console.log("amountDinamic :", amountDinamic);
            console.log("ConsolidateData :", ConsolidateData);    
            console.log("RegPayData :", RegPayData);
            console.log("Paid :", Paid);

            //ConsolidateData : false
            //RegPayData : true
            //Paid : false

            if (ConsolidateData === "false" && RegPayData ==="false" && Paid === "false") {
       
                console.log("existe elementos amountDinamic y podemos mostrar los botones consolidar y eliminar");
                dataRegisterPay.classList.add('close')
                btnDeclineConsolide.classList.remove('close'); //es el set de botones Consolidar y Eliminar

                //con esto tengo el control de todos los item y con la variable i puedo tomar el control de cada item y saber el precio para tener el total
                amountDinamic.forEach((ele, i)=>{ //aqui es cuando manipulo el input de las cantidades.

                    ele.addEventListener("input", ()=>{
                        let totalPay = 0;
                        console.log("ver aqui..............")
                        //console.log("amount ...............:", ele.value)
                        //console.log("price :", priceDinamic[i].textContent);
                        //console.log("total :", totalDinamic[i].textContent);
                        const amount = ele.value;
                        const price = priceDinamic[i].textContent;
                        const total = (amount * price).toFixed(2);
                        
                        totalDinamic[i].innerText = total //aqui actualizo el total del items
                        console.log("amount.......... :", amount);
                        console.log("total.......... :", total);
                        
                        console.log("se esta actualizando el elemento......:", i);
                        
                        arrayParse[i].countRequest = amount;
                        console.log("arrayParse actualizado.........:", arrayParse);


                        amountDinamic.forEach((ele, i) => {
                            // Asegurarse de obtener los valores numéricos
                            const amount = Number(ele.value); // si es input, usar .value y convertir a número
                            const price = Number(priceDinamic[i].textContent.trim());
                            const total = Number(totalDinamic[i].textContent.trim());

                            // Sumar el total a totalPay
                            totalPay += total;

                        });

                        datos.boxShopping = arrayParse; //actualizamos el boxShopping
                        datos.total = totalPay.toFixed(2); //actualizamos el total del articulo modificado
                        boxConsolidate = datos; //guardamos el objeto datos dentro del boxConsolidate

                        console.log("totalPay............. :", totalPay)
                        totalPayDinamic.innerHTML = `<span style="white-space: nowrap"> <i class="bi bi-currency-dollar"></i>${totalPay.toFixed(2)} </span>`; 
                        
                    })

                })

                //.......ocultamos bloques de controles.
                dataRegisterPay.classList.add('close'); //aseguramos que no se ve el bloque de registro de pagos.
                btnOptions.classList.add('close'); //aseguramos que el set de botones de aceptar o declinar pagos este oculto.
                controlSent.classList.add('close'); //aseguramos que no se ve el bloque de envio del carrito.
                controlReceived.classList.add('close'); //aseguramos que no aparece el control de envio.

            } else if (ConsolidateData === "true" && RegPayData ==="false" && Paid === "false") {    

                console.log("este pago no ha sido registrado........")
                dataRegisterPay.classList.remove('close');
                insertDataRegistePay.innerHTML = "";

                btnDeclineConsolide.classList.add('close');
                btnOptions.classList.add('close');
                insertDataRegistePay.innerHTML = ` 
                                            <div class="alert">
                                                <p class="mb-1"> <b> Estatus: </b> <span class="rounded-pill px-2 bg-light ms-1 text-dark"> <b>Esperando registro de Pago...</b> </span> </p>                              
                                            </div>`

                //.......ocultamos bloques de controles.                            
                btnOptions.classList.add('close'); //aseguramos que el set de botones de aceptar o declinar pagos este oculto.
                controlSent.classList.add('close'); //aseguramos que no se ve el bloque de envio del carrito. 
                controlReceived.classList.add('close'); //aseguramos que no aparece el control de envio.                            

            } else if (ConsolidateData === "true" && RegPayData ==="true" && Paid === "false") {

                let lastStatus;
                console.log("Este pago ha sido registrado........")
                dataRegisterPay.classList.remove('close')
                btnDeclineConsolide.classList.add('close');

                console.log("dataRegister........", dataRegister);

                if (dataRegister.length > 0){
                    const lastIndex = dataRegister.length -1;
                    lastStatus = dataRegister[lastIndex].response;
                    console.log("lastStatus .......:", lastStatus); // esto puede ser "ok", "error" o "";

                    insertDataRegistePay.innerHTML = "";

                    dataRegister.forEach((ele, i)=>{
                        const method = ele.methodPay;
                        const detail = ele.detailPay;
                        const status = ele.response;

                        let statusMessage = ""; // Inicializa una variable para el mensaje de estatus

                        if (status === "") {
                            statusMessage = `<span class="rounded-pill px-2 bg-light ms-1 text-dark"> <b>Esperando Validación...</b> </span>`;
                        } else if (status === "error") {
                            statusMessage = `<span class="rounded-pill px-2 bg-danger ms-1 text-light"> <b>Error en Registro</b> </span>`; // Cambia esto según lo que quieras mostrar si hay un estatus
                        } else if (status === "ok") {
                            statusMessage = `<span class="rounded-pill px-2 bg-primary ms-1 text-light"> <b>Pagado</b> </span>`;
                        }

                        
                        insertDataRegistePay.innerHTML += ` 
                                                <div class="alert">
                                                    <p class="mb-1"> <b> Método de pago: </b> ${method} </p>
                                                    <p class="mb-1"> <b> Detalle de pago: </b> ${detail} </p>
                                                    <p class="mb-1"> <b> Estatus: </b> ${statusMessage} </p>                              
                                                </div>`
                    })

                }   
                
                console.log("VER lastStatus .............:", lastStatus);
                if (lastStatus == ""){
                    btnOptions.classList.remove('close');
                } else if (lastStatus == "error" ){
                    btnOptions.classList.add('close');
                } else if (lastStatus == "ok") {
                    btnOptions.classList.add('close');
                } 
                     
                //.......ocultamos bloques de controles.
                //dataRegisterPay.classList.add('close'); //aseguramos que no se ve el bloque de registro de pagos.
                //btnOptions.classList.add('close'); //aseguramos que el set de botones de aceptar o declinar pagos este oculto.
                controlSent.classList.add('close'); //aseguramos que no se ve el bloque de envio del carrito.
                controlReceived.classList.add('close'); //aseguramos que no aparece el control de envio.

            } else if (ConsolidateData === "true" && RegPayData ==="true" && Paid === "true") {

                console.log("El carrito ha sido pagado...........................");
                //.......liberamos bloques de controles.
                dataRegisterPay.classList.remove('close'); //aseguramos que no se ve el bloque de registro de pagos.
                insertDataRegistePay.innerHTML = "";
                controlSent.classList.remove('close'); //aseguramos que no se ve el bloque de envio del carrito.
                controlReceived.classList.remove('close'); //aseguramos que no aparece el control de envio.

                //muestra el registro de pago...............................
                if (dataRegister.length > 0){
                    const lastIndex = dataRegister.length -1;
                    lastStatus = dataRegister[lastIndex].response;
                    console.log("lastStatus .......:", lastStatus); // esto puede ser "ok", "error" o "";

                    insertDataRegistePay.innerHTML = "";

                    dataRegister.forEach((ele, i)=>{
                        const method = ele.methodPay;
                        const detail = ele.detailPay;
                        const status = ele.response;

                        let statusMessage = ""; // Inicializa una variable para el mensaje de estatus

                        if (status === "") {
                            statusMessage = `<span class="rounded-pill px-2 bg-light ms-1 text-dark"> <b>Esperando Validación...</b> </span>`;
                        } else if (status === "error") {
                            statusMessage = `<span class="rounded-pill px-2 bg-danger ms-1 text-light"> <b>Error en Registro</b> </span>`; // Cambia esto según lo que quieras mostrar si hay un estatus
                        } else if (status === "ok") {
                            statusMessage = `<span class="rounded-pill px-2 bg-primary ms-1 text-light"> <b>Pagado</b> </span>`;
                        }

                        
                        insertDataRegistePay.innerHTML += ` 
                                                <div class="alert">
                                                    <p class="mb-1"> <b> Método de pago: </b> ${method} </p>
                                                    <p class="mb-1"> <b> Detalle de pago: </b> ${detail} </p>
                                                    <p class="mb-1"> <b> Estatus: </b> ${statusMessage} </p>                              
                                                </div>`
                    })

                }

                if (Sent.sentStatus === "false"){
                    controlSent.classList.remove('close');
                    sentDetails.value=""
                    sentDetails.removeAttribute("disabled");
                    sentBtn.classList.replace('btn-secondary', 'btn-primary');
                    sentBtn.removeAttribute("disabled");
                    controlReceived.classList.add('close');
                } else if (Sent.sentStatus === "true" && Received === "false") {
                    controlSent.classList.remove('close');
                    sentDetails.value= Sent.sentDetails;
                    sentDetails.setAttribute("disabled", "");
                    sentBtn.classList.replace('btn-primary','btn-secondary')
                    sentBtn.setAttribute("disabled", "");
                    controlReceived.classList.add('close');
                } else if (Sent.sentStatus === "true" && Received === "true") {
                    controlSent.classList.remove('close');
                    sentDetails.value= Sent.sentDetails;
                    sentDetails.setAttribute("disabled", "");
                    sentBtn.classList.replace('btn-primary','btn-secondary')
                    sentBtn.setAttribute("disabled", "");
                    //ahora mostramos el controlRateComment
                    controlReceived.classList.remove('close');
                }

                //--------------ocultamos botones innecesarios 
                btnOptions.classList.add('close'); //aseguramos que el set de botones de aceptar o declinar pagos este oculto.
                btnDeclineConsolide.classList.add('close');
                
            }



        })    
    

    })



    //--------------------------------------------------------------------------------------
    //Declinar
    btnDecline.addEventListener('click', ()=>{
        
    btnDecline.setAttribute("disabled", "");
    btnApprove.setAttribute("disabled", "");

         const dato = {
            box : boxConsolidate
        }

        console.log("dato :", dato)

        fetch('/done_shoppingCart/registerPay/unpaid', {

        method: "post",
        body: JSON.stringify(dato),
        headers: {"content-type" : "application/json"}

        })
        .then(response => response.json())
        .then( jsonx => {
            console.log("jsonx :",  jsonx)
            const code = jsonx.code;
            const message = jsonx.message;
         
            if (code === "ok"){
                mostrarToast( message, 'right', 'success', '¡Hecho!', true ); // Agrega título aquí

                setTimeout(() => {
                    mostrarToast( '¡Actualizando!', 'right', 'success', '', true ); // Agrega título aquí

                    setTimeout(() => {
                        location.reload();    
                    }, 3000);

                }, 1000);
            } else {
                const message = "Ha habido un error, por favor ¡intente más tarde!."
                mostrarToast( message, 'right', 'danger', '¡Error!', true ); // Agrega título aquí

                setTimeout(() => {
                    btnDecline.removeAttribute("disabled", "");
                    btnApprove.removeAttribute("disabled", "");
                },5000);                
            }    
                            
            
        })
        .catch( err => console.log(err))

    })
    
    //Approve
    btnApprove.addEventListener('click', ()=>{
        
        btnApprove.setAttribute("disabled", ""); //desactivamos el boton
        btnDecline.setAttribute("disabled", ""); //desactivamos el boton de decline tambien

        const dato = {
            box : boxConsolidate
        }
        
        console.log("dato :", dato);
        
        fetch('/done_shoppingCart/registerPay/paid', {

        method: "post",
        body: JSON.stringify(dato),
        headers: {"content-type" : "application/json"}

        })
        .then(response => response.json())
        .then( jsonx => {
            console.log("jsonx :",  jsonx)
            const code = jsonx.code;
            const message = jsonx.message;
         
            if (code === "ok"){
                mostrarToast( message, 'right', 'success', '¡Hecho!', true ); // Agrega título aquí

                setTimeout(() => {
                    mostrarToast( '¡Actualizando!', 'right', 'success', '', true ); // Agrega título aquí

                    setTimeout(() => {
                        location.reload();    
                    }, 3000);

                }, 1000);
            } else {
                const message = "Ha habido un error, por favor ¡intente más tarde!."
                mostrarToast( message, 'right', 'danger', '¡Error!', true ); // Agrega título aquí

                setTimeout(() => {
                    btnDecline.removeAttribute("disabled", "");
                    btnApprove.removeAttribute("disabled", "");
                },5000);
            }    
                            
            
        })
        .catch( err => console.log(err))


    })

</script>

<script>
    const btnConsolidate = document.querySelector('.btnConsolidate');
    const btnDelete = document.querySelector('.btnDelete');

    btnConsolidate.addEventListener('click', ()=>{
        console.log("Solicitud de pedido consolidado");
        //aqui deben enviar los nuevos datos a la tienda donde se espera la consolidacion

        btnConsolidate.setAttribute("disabled", ""); //desactivamos el boton consolidar
        btnDelete.setAttribute("disabled", ""); //desactivamos el boton de eliminar tambien.

        const dato = {
            box : boxConsolidate
        }

        console.log("dato :", dato)
        
        
        fetch('/done_shoppingCart/consolidate', {

        method: "post",
        body: JSON.stringify(dato),
        headers: {"content-type" : "application/json"}

        })
        .then(response => response.json())
        .then( jsonx => {
            console.log("jsonx :",  jsonx)
            const code = jsonx.code;
            const message = jsonx.message;
         
            if (code === "ok"){
                mostrarToast( message, 'right', 'success', '¡Hecho!', true ); // Agrega título aquí

                setTimeout(() => {
                    mostrarToast( '¡Actualizando!', 'right', 'success', '', true ); // Agrega título aquí

                    setTimeout(() => {
                        location.reload();    
                    }, 3000);

                }, 1000);
            } else {
                const message = "Ha habido un error, por favor ¡intente más tarde!."
                mostrarToast( message, 'right', 'danger', '¡Error!', true ); // Agrega título aquí

                setTimeout(() => {
                    btnConsolidate.removeAttribute("disabled");
                    btnDelete.removeAttribute("disabled");
                }, 3000);
            }    
                            
            
        })
        .catch( err => console.log(err))

        
    })

    btnDelete.addEventListener('click', ()=>{
        //console.log("Solicitud de pedido eliminado");
        //console.log("boxConsolidate :", boxConsolidate);
        btnDelete.setAttribute("disabled", ""); //desactivamos el boton de eliminar.
        btnConsolidate.setAttribute("disabled", ""); //desactivamos el boton consolidar tambien.
        
        const dato = {
            box : boxConsolidate
        }

        console.log("dato :", dato)
        
        fetch('/delete_shoppingCart/consolidate', {

        method: "post",
        body: JSON.stringify(dato),
        headers: {"content-type" : "application/json"}

        })
        .then(response => response.json())
        .then( jsonx => {
            console.log("jsonx :",  jsonx)
            const code = jsonx.code;
            const message = jsonx.message;
         
            mostrarToast( message, 'right', 'success', '¡Hecho!', true ); // Agrega título aquí

            setTimeout(() => {
                mostrarToast( '¡Actualizando!', 'right', 'success', '', true ); // Agrega título aquí

                setTimeout(() => {
                    location.reload();    
                }, 3000);

            }, 1000);
                        
            
        })
        .catch( err =>  {
            console.log(err)

            setTimeout(() => {
                btnDelete.removeAttribute("disabled"); //desactivamos el boton de eliminar.
                btnConsolidate.removeAttribute("disabled"); //desactivamos el boton consolidar tambien.
            }, 2000);

        }) 

    })

</script>

<script>


   sentBtn.addEventListener("click", ()=>{

    sentBtn.setAttribute("disabled", "");
    const sentDetailsValue = sentDetails.value;
    console.log("Hemos notificado el envio de la compra al cliente");
    console.log("...y va con este detalle :", sentDetailsValue);

        const dato = {
            box : boxConsolidate,
            sentDetails : sentDetailsValue
        }
    
        
        console.log("dato :", dato);
        
        fetch('/done_shoppingCart/registerSent', {

        method: "post",
        body: JSON.stringify(dato),
        headers: {"content-type" : "application/json"}

        })
        .then(response => response.json())
        .then( jsonx => {
            console.log("jsonx :",  jsonx)
            const code = jsonx.code;
            const message = jsonx.message;
         
            if (code === "ok"){
                mostrarToast( message, 'right', 'success', '¡Hecho!', true ); // Agrega título aquí

                setTimeout(() => {
                    mostrarToast( '¡Actualizando!', 'right', 'success', '', true ); // Agrega título aquí

                    setTimeout(() => {
                        location.reload();    
                    }, 3000);

                }, 1000);
            } else {
                const message = "Ha habido un error, por favor ¡intente más tarde!."
                mostrarToast( message, 'right', 'danger', '¡Error!', true ); // Agrega título aquí

                setTimeout(() => {
                    btnDecline.removeAttribute("disabled", "");
                    btnApprove.removeAttribute("disabled", "");
                },5000);
            }    
                            
            
        })
        .catch( err => console.log(err))


   })

</script>

<script>
//script que da vida a las estrellas y activa al boton para comentar y calificar
const commentRating = document.querySelector('.commentRating'); //boton para enviar el comentario y la calificación.
const comment = document.querySelector('.comment'); //textarea de comentario
const starE = document.querySelectorAll('.starE'); // esto son iconos tipo estrella 
let star = 1;

if (starE) {
    starE.forEach((ele, i) => {
        ele.addEventListener("click", () => {
            star = ele.getAttribute("data-star"); // aquí es el número de la estrella
            
            // Desactivar o activar las estrellas
            starE.forEach((starElement, index) => {
                if (index < parseInt(star)) {
                    starElement.classList.replace("bi-star", "bi-star-fill");
                } else {
                    starElement.classList.replace("bi-star-fill", "bi-star");
                }
            });

        });
    });
}


commentRating.addEventListener('click', ()=>{
    const commentV = comment.value;
    console.log("commentV ......:", commentV);
    console.log("star ......:", star);

    //cuando se envie esta informacion en el proceso se debe eliminar los mensajes "typeNote: "shoppingCart-Received"
    // este tambien queda sin ser eliminado: typeNote: "shoppingCart-Paid"

    commentRating.setAttribute("disabled", "");

    if (commentV.length === 0 || star === 0){

        const message = "Debe dejar un comentario y una calificación";
        mostrarToast( message, 'right', 'danger', '¡Error!', true ); // Agrega título aquí

        setTimeout(() => {
            commentRating.removeAttribute("disabled");
        }, 3000);

    } else {    

        const dato = {
            IDCart,
            comment : commentV,
            rating : star

        }

        console.log("dato.............. :", dato); 
            
        fetch('/done_shoppingCart/registerCommentRatingToBuy', {

            method: "post",
            body: JSON.stringify(dato),
            headers: {"content-type" : "application/json"}

            })
            .then(response => response.json())
            .then( jsonx => {
                console.log("jsonx :",  jsonx)
                const code = jsonx.code;
                const message = jsonx.message;
            
                if (code === "ok"){
                    mostrarToast( message, 'right', 'success', '¡Hecho!', true ); // Agrega título aquí

                    setTimeout(() => {
                        mostrarToast( '¡Actualizando!', 'right', 'success', '', true ); // Agrega título aquí

                        setTimeout(() => {
                            location.reload();    
                        }, 3000);

                    }, 1000);
                } else {
                    const message = "Ha habido un error, por favor ¡intente más tarde!."
                    mostrarToast( message, 'right', 'danger', '¡Error!', true ); // Agrega título aquí

                    setTimeout(() => {
                        btnDecline.removeAttribute("disabled", "");
                        btnApprove.removeAttribute("disabled", "");
                    },5000);
                }    
                                
                
            })
            .catch( err => console.log(err))

    }

})


</script>


<script>


    function mostrarToast(mensaje, posicion, color, titulo = '', conBotonCerrar = false) {
        // Configuración predeterminada
        toastr.options = {
            "closeButton": conBotonCerrar, // Agregar botón de cerrar si se solicita
            "debug": false,
            "newestOnTop": false,
            "progressBar": !conBotonCerrar, // Si tiene botón de cerrar, no mostrar barra de progreso
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "600",
            "hideDuration": "1000",
            "timeOut": conBotonCerrar ? false : "8000", // No se oculta automáticamente si tiene botón de cerrar
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
  
        // Configurar la posición
        switch (posicion) {
            case 'center':
                toastr.options.positionClass = 'toast-top-center';
                break;
            case 'left':
                toastr.options.positionClass = 'toast-top-left';
                break;
            case 'right':
                toastr.options.positionClass = 'toast-top-right';
                break;
            default:
                toastr.options.positionClass = 'toast-top-right'; // Posición predeterminada
        }
  
        // Mostrar el mensaje según el color especificado
        switch (color) {
            case 'success':
                titulo ? toastr.success(mensaje, titulo) : toastr.success(mensaje);
                break;
            case 'info':
                titulo ? toastr.info(mensaje, titulo) : toastr.info(mensaje);
                break;
            case 'warning':
                titulo ? toastr.warning(mensaje, titulo) : toastr.warning(mensaje);
                break;
            case 'danger':
                titulo ? toastr.error(mensaje, titulo) : toastr.error(mensaje);
                break;
            case 'primary':
                titulo ? toastr.info(mensaje, titulo, { toastClass: 'toast-primary' }) : toastr.info(mensaje, '', { toastClass: 'toast-primary' });
                break;
            case 'dark':
                titulo ? toastr.info(mensaje, titulo, { toastClass: 'toast-dark' }) : toastr.info(mensaje, '', { toastClass: 'toast-dark' });
                break;
            default:
                console.warn('Color no válido. Usando el color por defecto (success).');
                titulo ? toastr.success(mensaje, titulo) : toastr.success(mensaje);
        }
    }
  
    //mostrarToast( response , 'right', 'danger', '', true ); // Agrega título aquí
  
</script>
