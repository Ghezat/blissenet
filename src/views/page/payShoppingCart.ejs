<!DOCTYPE html>
<html lang="en">

<head>

    <%- include('../partials/head.ejs') %>
    <link rel="stylesheet" href="/toastr/toastr.min.css"> <!-- tiene que despues del CDN de bootstrap -->
    <script src="/toastr/toastr.min.js"></script>

    <title>Blissenet Pay ShoppingCart</title>

</head>
<style>



    .toast-success {
        /* Esta clase es unicamente para dar color al alert toastr de tipo success que debe ser violeta */
        background-color: #6f42c1; /* Azul tirando a morado */
        color: white; /* Color del texto */
    } 
    
@media screen and (min-width: 290px) and (max-width: 499px ){

 
}

</style>

<body class="mainTheme" style="max-width: 100vw; min-height: 100vh;">
    <main class="themaTextLight" style="max-width: 100% !important;">

        <%- include('../partials/navi-simple.ejs') %>

        
        <%# if (catchError){ %>
            <%#- include('../alert/catchError.ejs') %> 
        <%# }; %>


        <% if (user) { %>

            <% const seeMarket = user.seeMarket %>
            <% const idUser = user._id %>
            <input type="hidden" value="<%= seeMarket.countryMarketCode %>" id="seeMarket">
            <input type="hidden" value="<%= idUser %>" id= "idUser">
            <!-- este bloque me permite validad si el usuario que se logea tiene un meercado definido. sino lo tiene debe obligatoriamente hacerlo. --> 

            <div class="container-fluid d-flex justify-content-start py-2" style="background: linear-gradient(90deg, rgba(146,0,255,1) 0%, rgba(174,65,255,1) 50%, rgba(13,110,253,1) 100%);">
                <span class="ms-2 p-0" style="font-weight: 400; color: #ffde00;"> <b> Shopping Cart Management </b>  </span>
            </div>    
            
            <div class="container-fluid p-0">
                            
            
                <div class="ShoppingCart-Admin p-0">
                        
                    <% const username = user.username %>
                    <% const indexed = user._id %> <!-- esto es igual al id user -->

                    <% if (searchProfile) {  %> <!-- cuenta con perfil -->
                        
                        <div class="content_search">

                            <div class="row d-flex justify-content-around m-0 " style="background-color:rgba(217, 223, 223, 0.2);">
                
                                <div class="col-lg-4 col-md-4 col-sm-12 col-12 p-0 my-4 rounded-2"  style="background-color: rgba(209, 209, 209, 0.2)">

                                    <div class="container-fluid p-0">
                                            
                                        <div class="card-header">
                                            <span style="font-size: 18px;">Getiona tu Compra</span>
                                        </div>
                                        <div class="card-body">

                                            <div class="requests mb-3">
                                                <span style="font-size: 16px;"> Compras:  <span class="bg-secondary text-light rounded-3 px-2 ms-3"> <%= sumCount %> </span>   </span> 
                                            </div>
                                            

                                            <% if (sumCount !==0){ %>

                                                
                                                    <% shoppingCartforPay.forEach((ele)=>{  %>
                                                        <% const iDCart = ele._id %>
                                                        <% const sellerName = ele.sellerName %>
                                                        <% const customerName = ele.customerName %>
                                                        <% const date = ele.date %>
                                                        <% const amount = ele.amount %>
                                                        <% const boxShoppingCart = ele.boxShoppingCart %>
                                                        <% const purchaseReceiver = ele.purchaseReceiver %>
                                                        <% const deliveryOptions = ele.deliveryOptions %>
                                                        <% const consolidate = ele.consolidate %>
                                                        <% const regPay = ele.regPay %>
                                                        <% const dataRegPay = ele.dataRegPay %>
                                                        <% const paid = ele.paid %>
                                                        <% const sent = ele.sent %>
                                                        <% const received = ele.received %>                              

                                                        
                                                        <div class="listCart d-flex justify-content-between border rounded-2 mb-1 cursor-pointer" style="font-size: 16px;">
                                                            <input type="hidden" class="iDCart" value="<%= iDCart %>"> 
                                                            <input type="hidden" class="customerNameData" value="<%= customerName %>">
                                                            <input type="hidden" class="sellerNameData" value="<%= sellerName %>">
                                                            <input type="hidden" class="amount" value="<%= amount %>">  
                                                            <input type="hidden" class="boxShoppingCartData" value="<%=  JSON.stringify(boxShoppingCart) %>">
                                                            <input type="hidden" class="purchaseReceiverData" value="<%=  JSON.stringify(purchaseReceiver) %>"> 
                                                            <input type="hidden" class="deliveryOptions" value="<%= deliveryOptions %>">
                                                            <input type="hidden" class="consolidate" value="<%= consolidate %>">
                                                            <input type="hidden" class="regPay" value="<%= regPay %>">
                                                            <input type="hidden" class="dataRegPay" value="<%= JSON.stringify(dataRegPay) %>"> 
                                                            <input type="hidden" class="paid" value="<%= paid %>">
                                                            <input type="hidden" class="sent" value="<%= JSON.stringify(sent) %>">
                                                            <input type="hidden" class="received" value="<%= received %>">
                                                         
                                                            
                                                            <div class="listLeft">
                                                                <img src="/img/iconCartBuyes.png" alt="" style="width: 35px; height: 35px;">
                                                                <span class="me-1"><%= sellerName  %> </span> <span class="px-2 rounded-3" style="white-space: nowrap"> <i class="bi bi-currency-dollar"></i>(<%= amount  %>)</span> 
                                                            </div> 

                                                            <div class="listRight d-flex align-items-center">
                                                                <span class="me-2 bg-light rounded-3 px-2 text-dark shadow-sm" style="font-size: 14px; white-space: nowrap">
                                                                   <i><%= date %></i> 
                                                                </span>
                                                            </div>
                                                            
                                                        </div>    
                                                    <% }); %>    
                                                
                                         
                                            <% } else { %>
                                                <span class="rounded-3 p-2" style="background-color: rgba(0, 0, 0, 0.1);">No hay carritos pendientes</span>
                                            <% }; %>    

                                        
                                        </div>
                                          
                                        <div class="form-group px-3 mt-4 mb-2">
                                            <a class="form-control btn btn-primary" href="/myaccount/tracking">Tracking</a>
                                        </div>  
                                    </div>

                                </div>

                                <div class="col-lg-7 col-md-7 col-sm-12 col-12 p-0 my-4 rounded-2"  style="background-color: rgba(209, 209, 209, 0.2)">

                                    <div class="contentainer-fluid containerBoxShop">

                                            <div class="card-header">
                                               <span style="font-size: 18px;">Datos y Lista de Compra</span>
                                            </div>    
                                            <div class="card-body">

                                                <% if (sumCount !==0){ %>
                                                    
                                                    <div class="containerAlertSelect">
                                                        <div class="alert" style="background-color: rgb(0, 0, 0, 0.1); font-size: 16px;">
                                                            <p>ยก Seleccione un carrito de compra !</p>
                                                        </div>
                                                    </div>
                                                <% } else { %>
                                                    <div class="containerImageSinResultados d-flex justify-content-center p-5">
                                                        <img src="/img/sinResultados.png" style="width: 200px;">
                                                    </div>
                                                <% }; %>

                                                <div class="SELLERName rounded-3 text-light mb-2" style="font-size: 18px;">
                                                    <!-- dato inyectado dinamicamente -->
                                                </div>
                                                
                                                <div class="containerTableData close">
                                                    <table class="table themaTextLight">
                                                        <thead>
                                                            <tr>
                                                                <th>Descrip.</th> <th>Cant.</th> <th style="white-space: nowrap;">P. Unit.</th> <th>Total</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody class="listShoppingCart">
                                                            <!-- tabla dinamica -->
                                                        </tbody>
                                                        <tfoot style="font-size: 16px; background-color: rgb(0, 0, 0, 0.1);">
                                                            <tr>
                                                                <th colspan="3">Total a Pagar ..........</th>
                                                                <th><span class="totalPayDinamic"> </span></th>
                                                            </tr>
                                                        </tfoot>
                                                    </table>                                             
                                                    <div class="form-group my-2 d-flex flex-wrap" style="font-size: 16px;">
                                                        <span class="me-2 rounded-pill px-3 py-2 mb-2" style="background-color: rgba(0, 0, 0, 0.1); white-space: nowrap;"> <b>Nombre: </b> <span class="clientNames"></span>  </span> 
                                                        <span class="me-2 rounded-pill px-3 py-2 mb-2" style="background-color: rgba(0, 0, 0, 0.1); white-space: nowrap;"> <b>Documento: </b> <span class="clientDocument"></span> </span>
                                                        <span class="me-2 rounded-pill px-3 py-2 mb-2" style="background-color: rgba(0, 0, 0, 0.1); white-space: nowrap;"> <b>Telรฉfono:</b> <span class="clientPhone"></span> </span>
                                                    </div>
                                                    <div class="form-group my-0 px-3 py-2 mb-3" style="font-size: 16px; background-color: rgba(0, 0, 0, 0.1); width: auto; border-radius: 10px;">
                                                        <span style="white-space: 16px;"> <b>Direcciรณn:</b> <span class="clientAddress"></span> </span>
                                                    </div>
                                                    <div class="containerDelivery form-group my-0 px-3 py-2 mb-3 close" style="font-size: 16px; background-color: rgba(0, 0, 0, 0.1); width: 100%; border-bottom-left-radius: 0; border-bottom-right-radius: 0; border-top-left-radius: 9px; border-top-right-radius: 9px; ">
                                                        <span style="white-space: 16px;"> <b>Delivery:</b> </span> <span class="delivery bg-secondary text-light rounded-pill ms-1 px-3 py-1" style="white-space: nowrap;"> </span> 
                                                    </div> 
                                                </div>    

                                                <div class="dataRegisterPay close" style="background-color: rgba(0, 0, 0, 0.1); width: 100%; font-size: 15px; border-bottom-right-radius: 9px; border-bottom-left-radius: 9px;">
                                                    <!-- dinamico -->
                                                </div>

                                               
                                                <div class="btnControl close" style="background-color: rgba(0, 0, 0, 0.1); width: 100%; font-size: 15px; border-bottom-right-radius: 9px; border-bottom-left-radius: 9px;">
                                                    <div class="d-flex justify-content-between p-3" style="font-size: 20px;">
                                                            <button type="button" class="btn btn-danger rounded-pill py-2 px-4 btnDelete" style="width: 45%;">  <b> <i class="bi bi-x-circle me-1"></i> Eliminar </b>  </button>
                                                            <button type="button" class="btn btn-primary rounded-pill py-2 px-4 btnPay" style="width: 45%;"> <b> <i class="bi bi-check-circle me-1"></i> Pagar </b> </button>
                                                    </div>
                                                </div>


                                                <div class="controlSent form-group close" style="background-color: rgba(0, 0, 0, 0.1); border-radius: 9px;">
                                                    <div class="p-3" style="font-size: 16px;">
                                                        <p> <b>ยก Atenciรณn, solo de click cuando haya recibido su pedido ! </b> </p>
                                                        
                                                        <span> <b>Detalle del Envio:</b> </span>
                                                        <textarea class="p-2 mb-2" id="TextSentDetails" rows="3" cols="50" style="width: 100%; resize: none;" disabled></textarea>
                                                        <button class="my-2 rounded-pill btn btn-primary form-control receivedBtn">
                                                             <span class="spinner-grow spinner-grow-sm me-1" role="status" aria-hidden="true"></span>
                                                             Recibido
                                                        </button>
                                                    </div>
                                                    
                                                    
                                                </div>

                                                <div class="controlReceived form-group close">
                                                    
                                                    <!-- <div class="card-header">Califique y deje un comentario a la Tienda.</div> -->
                                                    <div class="px-3 py-2 mb-3" style="background-color: rgba(0, 0, 0, 0.1); width: 100%; font-size: 15px; border-top-right-radius: 9px; border-top-left-radius: 9px;">
                                                        <span style="white-space: 16px;"> <b>Pedido :</b> </span> <span class="delivery bg-secondary text-light rounded-pill ms-1 px-3 py-1" style="white-space: nowrap;"> Declarado como recibido </span> 
                                                    </div>

                                                    <div class="form-group px-3 py-2 mb-3" style="background-color: rgba(0, 0, 0, 0.1); width: 100%; font-size: 15px; border-bottom-right-radius: 9px; border-bottom-left-radius: 9px;">
                                                        <div class="row m-0">
                                                            <div class="col-xl-8 col-lg-8 col-md-7 col-sm-12 p-0">
                                                                <textarea class="form-control comment" maxlength="500" placeholder="Deje aqui un comentario a la Tienda."></textarea>
                                                            </div>
                                                            <div class="col-xl-4 col-lg-4 col-md-5 col-sm-12 p-0" style="background-color: rgb(108, 117, 125, 0.8);">
                                                                <div class="contentToolStart d-flex py-2">
                                                                    <div class="containRateStar d-flex justify-content-center pt-1" style="width: 100%;">
                                                                        <i class="starE bi bi-star-fill mx-2" data-star="1" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i>
                                                                        <i class="starE bi bi-star mx-2" data-star="2" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i>
                                                                        <i class="starE bi bi-star mx-2" data-star="3" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i>
                                                                        <i class="starE bi bi-star mx-2" data-star="4" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i>
                                                                        <i class="starE bi bi-star mx-2" data-star="5" style="color: #ffde00; font-size: 1.4rem; cursor: pointer;"></i> 
                                                                    </div> 
                                                                </div>
                                                            </div> 

                                                        </div>  
                                                        <button class="btn btn-primary form-control my-3 commentRating">
                                                            <span class="spinner-grow spinner-grow-sm me-1" role="status" aria-hidden="true"></span>
                                                            Enviar Calificaciรณn y Comentario
                                                        </button>  
                                                    </div>
                                                </div>                                                



                                            </div>
                        
                                    </div>

                                    <div class="container-fluid containerDataBank close">
                                                                     

                                        <div class="cardBank my-3">
                                            <!-- tarjetas dinamicas --> 
                                                                                                                                    
                                        </div>

                                        <div class="containerDetailsMethod">
                                           
                                            <div class="detailsMethod my-2 alert border d-flex flex-column" style="background-color: rgba(128, 128, 128, 0.2);">
                                                <span> <i>Elija una opciรณn de pago.</i> </span>      
                                                <!--  datos dinamicos -->                                          
                                            </div> 

                                        </div>

                                        <div class="mb-3" style="width: 100%;" role="group" aria-label="Basic outlined example">
                                            <div class="d-flex justify-content-between p-3" style="font-size: 20px;">
                                                <button type="button" class="btn btn-dark rounded-pill py-2 px-4 btnMyShoppingCart" style="width: 45%;">  <b> <i class="bi bi-arrow-up-left-circle me-1"></i> Mi Compra </b>  </button>
                                                <button type="button" class="btn btn-primary rounded-pill py-2 px-4 btnRegPay" style="width: 45%;"> <b> <i class="bi bi-check-circle me-1"></i> Registrar Pago </b> </button>
                                            </div>
                                        </div> 


                                                                                
                                        
                                    </div>                                    

                                </div>

                            </div>

                        </div>  


                        <div class="card mt-1" style="background-color:rgba(217, 223, 223, 0.2);">
                            <div class="card-body d-flex justify-content-center ">
                                <a href="/" class="text-decoration-none" style="color: inherit">  <span id="logoBlissenet_com"> </span> </a> 
                            </div>
                        </div>
                        
                        <!-- Modal Shopping-cart --> <!--lo activa > data-bs-toggle="modal" data-bs-target="#staticSuicheSegment" -->
                        <div class="modal fade" id="staticCheckSearch" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabelH2" aria-hidden="true">
                            <div class="modal-dialog border border-secondary p-2 rounded-3" style="background-color: rgb(0, 0, 0, 0.3);">
                                <div class="modal-content text-dark">

                                    <div class="modal-header">
                                        <h5 class="modal-title" id="staticBackdropLabelH2">Carrito de Compras</h5>
                                        <i class="bi bi-x-lg cursor-pointer" data-bs-dismiss="modal"></i>
                                    </div>
                                    <div class="modal-body">
                                        <p><span class="fw-bold text-primary">Agrega un Carrito de Compras. </span>
                                            "ยกAprovecha esta funciรณn para facilitar las compras de tus clientes!, ofrece esta herramienta para que puedan
                                                hacer una compra de varios articulos con un solo pago."
                                        </p>
                                        <p> <span class="bg-dark py-1 px-2 rounded-2"> <b class="text-info">Requerimento : + 1 Anuncios</b>  </span> </p>
                                    </div>
                                    <div class="modal-footer" style="background-image: url('/img/bannerShoopingCart.jpg'); background-size: cover; background-position: center;">
                                        <button type="button" class="btn btn-dark" data-bs-dismiss="modal">Cerrar</button>
                                    </div>
                                </div>
                            </div>
                        </div> 
                        
                    <% } else { %> <!-- cuenta sin perfil -->

                    <% } %>                                                        

                                    
                </div>
    

            </div>

         <% } else { %>
            <div class="container-fluid d-flex justify-content-center p-3" style="height: 90%; width: 100%; background-color:  rgb(243, 238, 238); box-shadow: 1px 1px 5px 1px rgb(99, 98, 98);  border-top: 2px ridge  rgb(243, 238, 238);">
               
                <%- include('../partials/noLogin.ejs') %>

            </div>  
         <% }; %>

    </main>
        <%- include('../partials/scripts.ejs') %>
        <%- include('../partials/scriptsOnlyNavi-simpleNoIcons.ejs') %>
        <!-- este cnd es el constructor de QR  se encuentra en https://cdnjs.com/libraries/qrious -->
        <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script> esta sirve tambien pero deje la de abajo, no se cual es la diferencia entre ambas pero este es la cdn para crear los QR-->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js" integrity="sha512-pUhApVQtLbnpLtJn6DuzDD5o2xtmLJnJ7oBoMsBnzOkVkpqofGLGPaBJ6ayD2zQe3lCgCibhJBi4cj5wAxwVKA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
       

</body>


<script>
    const listCart = document.querySelectorAll('.listCart');
    const iDCart = document.querySelectorAll('.iDCart');
    const customerNameData = document.querySelectorAll('.customerNameData');
    const sellerNameData = document.querySelectorAll('.sellerNameData');
    const amount = document.querySelectorAll('.amount');
    const boxShoppingCartData = document.querySelectorAll('.boxShoppingCartData'); 
    const purchaseReceiverData = document.querySelectorAll('.purchaseReceiverData');
    const deliveryOption = document.querySelectorAll('.deliveryOptions');
    const consolidateData = document.querySelectorAll('.consolidate'); // "true" or "false"    
    const regPay = document.querySelectorAll('.regPay');
    const dataRegPay = document.querySelectorAll('.dataRegPay');
    const paid =  document.querySelectorAll('.paid');
    const sent = document.querySelectorAll('.sent'); //esto es un objeto
    const received = document.querySelectorAll('.received');

    //para inyectar
    const containerAlertSelect = document.querySelector('.containerAlertSelect');
    const containerTableData = document.querySelector('.containerTableData');

    const customerName = document.querySelector('.customerName');
    const SELLERName = document.querySelector('.SELLERName');
    const listShoppingCart = document.querySelector('.listShoppingCart');
    const totalPayDinamic = document.querySelector('.totalPayDinamic');

    const containerDelivery = document.querySelector('.containerDelivery');
    const deliverySpan = document.querySelector('.delivery');
    const clientNamesSpan = document.querySelector('.clientNames');
    const clientDocumentSpan = document.querySelector('.clientDocument');
    const clientPhoneSpan = document.querySelector('.clientPhone');
    const clientAddressSpan = document.querySelector('.clientAddress');

    const dataRegisterPay = document.querySelector('.dataRegisterPay'); //contenedor que muestra el metodo de pago y detalle del pago
    const btnControl = document.querySelector('.btnControl'); //botones consolidar y eliminar.
    const controlSent = document.querySelector('.controlSent'); //contenedor boton de enviado y textarea para colocar detalle del envio si lo requiere
    const TextSentDetails = document.getElementById('TextSentDetails'); //este es el textArea donde va el detalle del envio
    const controlReceived = document.querySelector('.controlReceived'); //contenedor que permite comentar y calificar la venta

    const receivedBtn = document.querySelector('.receivedBtn'); 

    let iDDinamic; //variable de id del articulo.
    let departDinamic; //variable de departamento del articulo.
    let titleDinamic; //variable del titulo del articulo.
    let amountDinamic; //variable de cantidad requerida por el cliente.
    let priceDinamic; //variable del precio del articulo.
    let totalDinamic; //variable del total del articulo. 
    let datos; //datos del boxShopping que peude ser el original o el actualizado si se llegara a cambiar alguna cantidad.
    let boxConsolidate; //variable que contendra un objeto que poseera toda la informacion real de lo que se puede despachar.

    let IDCart; //esta variable es global y contendra todos los id de los carritos que vayamos seleccinando.
    listCart.forEach((ele, i)=>{

        ele.addEventListener('click', ()=>{
            console.log("Valor del id del carrito :", ele);
            console.log(iDCart[i].value);
            IDCart = iDCart[i].value;
            const clientName = customerNameData[i].value;
            const sellerStoreNameData = sellerNameData[i].value;
            const receiverTxt = purchaseReceiverData[i].value; 
            const receiver = JSON.parse(receiverTxt);
            const Amount = amount[i].value;
            const deliveryOpt = deliveryOption[i].value;
            const ConsolidateData = consolidateData[i].value;
            const RegPay = regPay[i].value; 
            const DataRegPay = dataRegPay[i].value;
            const dataRegister = JSON.parse(DataRegPay);
            const Paid = paid[i].value;
            const sentV = sent[i].value;
            const Sent = JSON.parse(sentV);
            const Received = received[i].value;

            //console.log("receiver..........:", receiver);
            //console.log("deliveryOpt.......:", deliveryOpt);
            //console.log("dataRegister........:", dataRegister); // [{methodPay: 'Transferencia Bancaria', detailPay: '00001126268390099366388', response: ""}];
            console.log("ConsolidateData.....:", ConsolidateData);
            console.log("Paid..........", Paid);
            console.log("Sent..........", Sent);
            console.log("Received..........", Received);

            //hacemos aparecer o escoder contenedorres
            containerAlertSelect.classList.add('close');
            containerTableData.classList.remove('close');
            //.................................................

            let DeliveryOption;

            if (deliveryOpt === "D01"){
                DeliveryOption = "Retiro en Tienda."
            } else if (deliveryOpt === "D02"){
                DeliveryOption = "Entrega en lugar acordado."
            } else {
                DeliveryOption = "Delivery en la puerta del cliente."
            }


            //const methodPay = dataRegister.methodPay;
            //const detailPay = dataRegister.detailPay

            const clientNames = receiver.clientName;
            const clientIndentification = receiver.clientIndentification;
            const clientPhone = receiver.clientPhone;
            const clientAddress = receiver.clientAddress; 

            
            const boxShopping = boxShoppingCartData[i].value;
            const arrayParse = JSON.parse(boxShopping);
            console.log("boxShopping original:", arrayParse);
                       

            datos = {
                iDCart : IDCart,
                clientName : clientName,
                boxShopping : arrayParse,
                total : Amount
            }
            boxConsolidate = datos;

            //aqui ahora inyectamos los datos............................................................ 
            SELLERName.innerHTML = `<div class="bg-light rounded-pill text-secondary" style="height: auto; width: auto">        
                                        <img src="/img/iconCartBuyes.png" alt="" style="width: 30px; height: 30px;">
                                        <span class="ms-2"> <b> ${sellerStoreNameData} </b> </span>  
                                        <span class="ms-2 text-secondary" style="font-size : 15px">  <b> <i class="bi bi-currency-dollar"></i>  ${Amount}  </b>  </span>
                                    </div>`
                         
            listShoppingCart.innerHTML =""; //limpiamos el body
            arrayParse.forEach((ele)=>{
                        const total = (ele.countRequest * ele.price).toFixed(2);

                        if (ele.presentation == "fraction"){
                            listShoppingCart.innerHTML += `                                                       
                                                    <tr> 
                                                        <td> ${ele.title} </td> <td class="amountDinamic"> ${ele.countRequest} </td> <td class="priceDinamic"> ${ele.price} </td> <td class="totalDinamic"> ${total} </td>
                                                    </tr> 
                                            `
                        } else {
                            listShoppingCart.innerHTML += `                                                       
                                                    <tr> 
                                                        <td> ${ele.title} </td> <td class="amountDinamic"> ${ele.countRequest} </td> <td class="priceDinamic"> ${ele.price} </td> <td class="totalDinamic"> ${total} </td>
                                                    </tr> 
                                            `
                        }                    

            })

            containerDelivery.classList.remove("close"); //hacemos aparecer el contenedor.
            deliverySpan.innerText = DeliveryOption
            clientNamesSpan.innerText = clientNames;
            clientDocumentSpan.innerText = clientIndentification;
            clientPhoneSpan.innerText = clientPhone;
            clientAddressSpan.innerText = clientAddress;

            amountDinamic = document.querySelectorAll(".amountDinamic");
            priceDinamic = document.querySelectorAll(".priceDinamic");
            totalDinamic = document.querySelectorAll(".totalDinamic");


            //aqui calculamos el total a pagar sin cambiar datos de cantidad, que es el total original.......
                let totalPayOriginal = 0;
                amountDinamic.forEach((ele, i) => {

                    const total = Number(totalDinamic[i].textContent.trim());

                    // Sumar el total a totalPay
                    totalPayOriginal += total;
                });
                console.log("totalPayOriginal............. :", totalPayOriginal)
                totalPayDinamic.innerHTML = `<span style="white-space: nowrap"> <i class="bi bi-currency-dollar"></i>${totalPayOriginal.toFixed(2)} </span>`;
            // ----------------------------------------------------

            if (ConsolidateData === "false" && Paid === "false"){

                 btnControl.classList.add('close');
                 dataRegisterPay.classList.remove('close');
                 const message = `<span class="rounded-pill px-2 bg-light ms-1 text-dark"> <b>Esperando Consolidaciรณn...</b> </span>`
                 dataRegisterPay.innerHTML = `<div class="p-3"> <p class="mb-1"> <b> Estatus: </b> ${message} </p> </div>`
                 
            } else if (ConsolidateData === "true" && Paid === "false"){
                let lastStatus;
                console.log("Pedido no consolidado y Pago no registrado ....................");
               
                dataRegisterPay.classList.remove('close');
                console.log("dataRegister...............:", dataRegister);

                //siempre sera mayor que cero (0).
                if (dataRegister.length > 0){
                    const lastIndex = dataRegister.length -1;
                    lastStatus = dataRegister[lastIndex].response;
                    console.log("lastStatus .......:", lastStatus);

                    dataRegisterPay.innerHTML = ""; //limpiamos el contenedor, para que no se concatene

                    dataRegister.forEach((ele, i)=>{
                        const method = ele.methodPay;
                        const detail = ele.detailPay;
                        const status = ele.response;

                        let statusMessage = ""; // Inicializa una variable para el mensaje de estatus

                        if (status === "") {
                            statusMessage = `<span class="rounded-pill px-2 bg-light ms-1 text-dark"> <b>Esperando Validaciรณn...</b> </span>`;
                        } else if (status === "error") {
                            statusMessage = `<span class="rounded-pill px-2 bg-danger ms-1 text-light"> <b>Error en Registro</b> </span>`; // Cambia esto segรบn lo que quieras mostrar si hay un estatus
                        } else if (status === "ok") {
                            statusMessage = `<span class="rounded-pill px-2 bg-primary ms-1 text-light"> <b>Pagado</b> </span>`;
                        }    

                        dataRegisterPay.innerHTML += ` 
                                                <div class="alert mb-0">
                                                    <p class="mb-1"> <b> Mรฉtodo de pago: </b> ${method} </p>
                                                    <p class="mb-1"> <b> Detalle de pago: </b> ${detail} </p>
                                                    <p class="mb-1"> <b> Estatus: </b> ${statusMessage} </p>                              
                                                </div>`
                    })

                }  
                
                if (lastStatus === ""){
                     btnControl.classList.add('close');
                } else {
                     btnControl.classList.remove('close');
                }
               
                                           
            } else if (Paid === "true" && Sent.sentStatus === "false") {
                console.log("Carrito pagado no enviado........");
                dataRegisterPay.classList.remove('close')
                btnControl.classList.add('close');
                console.log("dataRegister...............:", dataRegister);
                //console.log("methodPay :", methodPay);
                //console.log("detailPay :", detailPay);

                dataRegister.forEach((ele, i)=>{
                    const method = ele.methodPay;
                    const detail = ele.detailPay;
                    const status = ele.response;

                    let statusMessage = ""; // Inicializa una variable para el mensaje de estatus

                    if (status === "") {
                        statusMessage = `<span class="rounded-pill px-2 bg-light ms-1 text-dark"> <b>Esperando Validaciรณn...</b> </span>`;
                    } else if (status === "error") {
                        statusMessage = `<span class="rounded-pill px-2 bg-danger ms-1 text-light"> <b>Error en Registro</b> </span>`; // Cambia esto segรบn lo que quieras mostrar si hay un estatus
                    } else if (status === "ok") {
                        statusMessage = `<span class="rounded-pill px-2 bg-primary ms-1 text-light"> <b>Pagado</b> </span>`;
                    } 

                    dataRegisterPay.innerHTML = ` 
                                            <div class="alert">
                                                <p class="mb-1"> <b> Mรฉtodo de pago: </b> ${method} </p>
                                                <p class="mb-1"> <b> Detalle de pago: </b> ${detail} </p>
                                                <p class="mb-1"> <b> Estatus: </b> ${statusMessage} </p>                              
                                            </div>`
                })

                // ocultamos los bloques de controles
                controlSent.classList.add('close');

            } else if (Paid === "true" && Sent.sentStatus === "true" && Received === "false") {
                console.log("Carrito pagado y enviado aun no recibido........");
                
                dataRegisterPay.classList.remove('close')
                btnControl.classList.add('close');
                controlSent.classList.remove('close');
                TextSentDetails.innerText = Sent.sentDetails;

                console.log("dataRegister...............:", dataRegister);
                //console.log("methodPay :", methodPay);
                //console.log("detailPay :", detailPay);

                dataRegister.forEach((ele, i)=>{
                    const method = ele.methodPay;
                    const detail = ele.detailPay;
                    const status = ele.response;

                    let statusMessage = ""; // Inicializa una variable para el mensaje de estatus

                    if (status === "") {
                        statusMessage = `<span class="rounded-pill px-2 bg-light ms-1 text-dark"> <b>Esperando Validaciรณn...</b> </span>`;
                    } else if (status === "error") {
                        statusMessage = `<span class="rounded-pill px-2 bg-danger ms-1 text-light"> <b>Error en Registro</b> </span>`; // Cambia esto segรบn lo que quieras mostrar si hay un estatus
                    } else if (status === "ok") {
                        statusMessage = `<span class="rounded-pill px-2 bg-primary ms-1 text-light"> <b>Pagado</b> </span>`;
                    } 

                    dataRegisterPay.innerHTML = ` 
                                            <div class="alert">
                                                <p class="mb-1"> <b> Mรฉtodo de pago: </b> ${method} </p>
                                                <p class="mb-1"> <b> Detalle de pago: </b> ${detail} </p>
                                                <p class="mb-1"> <b> Estatus: </b> ${statusMessage} </p>                              
                                            </div>`
                })

            } else if (Paid === "true" && Sent.sentStatus === "true" && Received === "true") { 
                console.log("Carrito pagado, enviado y recibido........");

                dataRegisterPay.classList.remove('close')
                btnControl.classList.add('close');
                controlSent.classList.add('close');
                controlReceived.classList.remove('close');

                console.log("dataRegister...............:", dataRegister);
                //console.log("methodPay :", methodPay);
                //console.log("detailPay :", detailPay);

                dataRegister.forEach((ele, i)=>{
                    const method = ele.methodPay;
                    const detail = ele.detailPay;
                    const status = ele.response;

                    let statusMessage = ""; // Inicializa una variable para el mensaje de estatus

                    if (status === "") {
                        statusMessage = `<span class="rounded-pill px-2 bg-light ms-1 text-dark"> <b>Esperando Validaciรณn...</b> </span>`;
                    } else if (status === "error") {
                        statusMessage = `<span class="rounded-pill px-2 bg-danger ms-1 text-light"> <b>Error en Registro</b> </span>`; // Cambia esto segรบn lo que quieras mostrar si hay un estatus
                    } else if (status === "ok") {
                        statusMessage = `<span class="rounded-pill px-2 bg-primary ms-1 text-light"> <b>Pagado</b> </span>`;
                    } 

                    dataRegisterPay.innerHTML = ` 
                                            <div class="alert">
                                                <p class="mb-1"> <b> Mรฉtodo de pago: </b> ${method} </p>
                                                <p class="mb-1"> <b> Detalle de pago: </b> ${detail} </p>
                                                <p class="mb-1"> <b> Estatus: </b> ${statusMessage} </p>                              
                                            </div>`
                })

            } 


        })    
    

    })



    

</script>

<script>
    const btnPay = document.querySelector('.btnPay');
    const btnDelete = document.querySelector('.btnDelete');

    const btnMyShoppingCart = document.querySelector('.btnMyShoppingCart');
    const btnRegPay = document.querySelector('.btnRegPay');

    const containerBoxShop = document.querySelector('.containerBoxShop'); //Este es el contenedor de la lista de compra. 
    const containerDataBank = document.querySelector('.containerDataBank'); //Este es el contenedor de las tarjetas de formas de pago.
    const cardBank = document.querySelector('.cardBank'); 
    const detailsMethod = document.querySelector('.detailsMethod'); //contenedor donde va a estar los detalles del method elejido
    let methodNameValue; //varianle global que almacena el metodo elejido de pago;
    let textDetailPay; //variable global que almacena el dettale del pago normalmente "num. de conformacion."
  

    btnPay.addEventListener('click', ()=>{
        console.log("Solicitud de pedido consolidado listo para ser pagado");
        console.log("boxConsolidate :", boxConsolidate);
        //aqui deben enviar los nuevos datos a la tienda donde se espera la consolidacion

        const dato = {
            IDCart : IDCart
        }

        console.log("dato :", dato)         
        
        fetch('/payShoppingCart/bankStore', {

        method: "post",
        body: JSON.stringify(dato),
        headers: {"content-type" : "application/json"}

        })
        .then(response => response.json())
        .then( jsonx => {
            console.log("jsonx :",  jsonx)
            const  paymentSystem = jsonx.searchBankStore.paymentSystem;
            console.log("paymentSystem :", paymentSystem);

            containerBoxShop.classList.add('close');
            containerDataBank.classList.remove('close');
                                         
            cardBank.innerHTML =""; //limpiamos el contenedor;

                
                paymentSystem.forEach((ele, i)=> {
                    cardBank.innerHTML += `
                                            <div class="my-1 alert border d-flex justify-content-between" for="data3" style="background-color: rgba(128, 128, 128, 0.4);">
                                                <label for="data${i}" class="pe-3 cursor-pointer"> <b> ${ele.methodName} </b> </label>
                                                <input type="radio" class="method" name="radioMethod" id="data${i}" style="width: 16px;">
                                             </div> 
                                        `
                })

                let methods = document.querySelectorAll('.method');

                methods.forEach((ele, i) => {
                    ele.addEventListener('change', () => { // Cambiรฉ 'checked' por 'change'
                        console.log("Hola aquรญ estoy", i);
                        console.log("methodPay", paymentSystem[i]);
                        const paymentSys =  paymentSystem[i];

                        detailsMethod.innerHTML = ""; 
                        detailsMethod.innerHTML = `
                            <div class="card-title border-bottom ">
                                <b> ${paymentSys.methodName} </b> 
                            </div>
                            <div class="card-body">
                                ${paymentSys.data1 ? `
                                    <div class="data my-1 cursor-pointer">
                                        <span class="p-0 my-0"> <b>${paymentSys.data1}</b> </span> <i class="bi bi-copy ms-2"></i>
                                    </div>` : ""}
                                
                                ${paymentSys.data2 ? `
                                    <div class="data my-1 cursor-pointer">
                                        <span class="p-0 my-0"> <b>${paymentSys.data2}</b> </span> <i class="bi bi-copy ms-2"></i>
                                    </div>` : ""}

                                ${paymentSys.data3 ? `
                                    <div class="data my-1 cursor-pointer">
                                        <span class="p-0 my-0"> <b>${paymentSys.data3}</b> </span> <i class="bi bi-copy ms-2"></i>
                                    </div>` : ""}    

                                ${paymentSys.data4 ? `
                                    <div class="data my-1 cursor-pointer">
                                        <span class="p-0 my-0"> <b>${paymentSys.data4}</b> </span> <i class="bi bi-copy ms-2"></i>
                                    </div>` : ""}  
                                    
                                ${paymentSys.reponse ? 
                                   "" : ` <div class="numConfirma form-group my-2">
                                                <label for="" class="mt-2 pe-2"> Num. confirmaciรณn/Detalle </label>
                                                <input type="text" maxlength="20" class="form-control textDetailPay">
                                         </div>` }

                            </div>
                        `;
                        
                        textDetailPay = document.querySelector('.textDetailPay');
                        methodNameValue = paymentSys.methodName;    

                        const biCopy = document.querySelectorAll('.data');
                        biCopy.forEach((ele)=>{
                            ele.addEventListener('click', ()=>{
                                //alert("hola copiando data")
                                console.log("ele.children : ", ele.children[0].innerText);
                                const textToCopy = ele.children[0].innerText;
                                
                                navigator.clipboard.writeText(textToCopy)
                                    .then(() => {
                                        console.log("Texto copiado al portapapeles: ", textToCopy);
                                        message = "Copiado al portapapeles."
                                        mostrarToast( message , 'right', 'info', '', false );
                                    })
                                    .catch(err => {
                                        console.error("Error al copiar el texto: ", err);
                                        message = "No se pudo copiar."
                                        mostrarToast( message , 'right', 'danger', '', false );
                                    });

                            })
                        })

                    });
                });



        })
        .catch( err => console.log(err))
 
        
    })

    btnDelete.addEventListener('click', ()=>{
        //console.log("Solicitud de pedido eliminado");
        //console.log("boxConsolidate :", boxConsolidate);

        const dato = {
            box : boxConsolidate
        }

        console.log("dato :", dato)
        alert("Estamos trabajando, Un poco de paciencia.");
/*         
        fetch('/shoppingCart/delete', {

        method: "post",
        body: JSON.stringify(dato),
        headers: {"content-type" : "application/json"}

        })
        .then(response => response.json())
        .then( jsonx => {
            console.log("jsonx :",  jsonx)
            const code = jsonx.code;
            const message = jsonx.message;
         
            mostrarToast( message, 'right', 'success', 'ยกHecho!', true ); 

            setTimeout(() => {
                mostrarToast( 'ยกActualizando!', 'right', 'success', '', true ); 

                setTimeout(() => {
                    location.reload();    
                }, 3000);

            }, 1000);
                        
            
        })
        .catch( err => console.log(err))
 */
    })

    btnMyShoppingCart.addEventListener('click', ()=>{
            containerBoxShop.classList.remove('close');
            containerDataBank.classList.add('close');
    });

    btnRegPay.addEventListener('click', ()=>{        

        btnRegPay.setAttribute("disabled", "");
        
        if (textDetailPay){
            const textDetailPayValue = textDetailPay.value;
            console.log("IDCart :", IDCart);
            console.log("methodNameValue :", methodNameValue);
            console.log("textDetailPayValue :", textDetailPayValue);
            

            if (textDetailPayValue !==""){

                const datos = {
                    IDCart : IDCart,
                    methodName : methodNameValue,
                    textDetailPay : textDetailPayValue
                }

                console.log("datos :", datos);
            
                fetch('/done_shoppingCart/registerPay', {

                method: "post",
                body: JSON.stringify(datos),
                headers: {"content-type" : "application/json"}

                })
                .then(response => response.json())
                .then( jsonx => {
                    console.log("jsonx :",  jsonx)
                    const code = jsonx.code;
                    const message = jsonx.message;
                
                    if (code === "ok"){

                        setTimeout(() => {
                            
                            containerDataBank.innerHTML = "" //limpiamos todo el contenedor 
                            containerDataBank.innerHTML = `
                                                            <div class="containerImg p-5 d-flex justify-content-center align-items-center">
                                                                <img src="/img/checkAnimation.gif" alt="" class="rounded-2" style=" width: 90%;">                                              
                                                            </div>` //metemos la amimacion gif de check 

                            setTimeout(() => {
                                location.reload();
                            }, 6000); 
                            
                        }, 2000);    
                         
                    } else {
                        const message = "Ha habido un error, por favor ยกintente mรกs tarde!."
                        mostrarToast( message, 'right', 'danger', 'ยกError!', true ); // Agrega tรญtulo aquรญ
                        setTimeout(() => {
                            btnRegPay.removeAttribute("disabled");
                        }, 2000);
                    }    
                                    
                    
                })
                .catch( err => console.log(err))

            } else {
                const message = "Debe colocar el detalle o el codigo de confirmaciรณn del pago."
                mostrarToast( message, 'right', 'info', '', true ); // Agrega tรญtulo aquรญ
                setTimeout(() => {
                    btnRegPay.removeAttribute("disabled");
                }, 2000);

            }    

        } else {
            const message = "Debe elegir un mรฉtodo de pago."
            mostrarToast( message, 'right', 'info', '', true ); // Agrega tรญtulo aquรญ
            setTimeout(() => {
                btnRegPay.removeAttribute("disabled");
            }, 2000);
        }

    })

</script>

<script>

receivedBtn.addEventListener('click', ()=>{
    console.log("ver ....receivedBtn --->", receivedBtn);
    //console.log("este es el carrito que quiero declarar que he recibido");
    //console.log("IDCart ........:", IDCart);
    receivedBtn.setAttribute("disabled", "");

    const dato = {
        IDCart   
    }

    console.log("dato.............. :", dato); 
    
    fetch('/done_shoppingCart/registerReceived', {

    method: "post",
    body: JSON.stringify(dato),
    headers: {"content-type" : "application/json"}

    })
    .then(response => response.json())
    .then( jsonx => {
        console.log("jsonx :",  jsonx)
        const code = jsonx.code;
        const message = jsonx.message;
    
        if (code === "ok"){
            mostrarToast( message, 'right', 'success', 'ยกHecho!', true ); // Agrega tรญtulo aquรญ

            setTimeout(() => {
                mostrarToast( 'ยกActualizando!', 'right', 'success', '', true ); // Agrega tรญtulo aquรญ

                setTimeout(() => {
                    location.reload();    
                }, 3000);

            }, 1000);
        } else {
            const message = "Ha habido un error, por favor ยกintente mรกs tarde!."
            mostrarToast( message, 'right', 'danger', 'ยกError!', true ); // Agrega tรญtulo aquรญ

            setTimeout(() => {
                receivedBtn.removeAttribute("disabled");
            },5000);
        }    
                        
        
    })
    .catch( err => console.log(err))

})

</script>

<script>
//script que da vida a las estrellas y activa al boton para comentar y calificar
const commentRating = document.querySelector('.commentRating'); //boton para enviar el comentario y la calificaciรณn.
const comment = document.querySelector('.comment'); //textarea de comentario
const starE = document.querySelectorAll('.starE'); // esto son iconos tipo estrella 
let star = 1;

if (starE) {
    starE.forEach((ele, i) => {
        ele.addEventListener("click", () => {
            star = ele.getAttribute("data-star"); // aquรญ es el nรบmero de la estrella
            
            // Desactivar o activar las estrellas
            starE.forEach((starElement, index) => {
                if (index < parseInt(star)) {
                    starElement.classList.replace("bi-star", "bi-star-fill");
                } else {
                    starElement.classList.replace("bi-star-fill", "bi-star");
                }
            });

        });
    });
}


commentRating.addEventListener('click', ()=>{
    const commentV = comment.value;
    console.log("commentV ......:", commentV);
    console.log("commentV.length ......:", commentV.length);
    console.log("star ......:", star);

    //cuando se envie esta informacion en el proceso se debe eliminar los mensajes "typeNote: "shoppingCart-Received"
    // este tambien queda sin ser eliminado: typeNote: "shoppingCart-Paid"

    commentRating.setAttribute("disabled", "");

    if (commentV.length === 0 || star === 0){

        const message = "Debe dejar un comentario y una calificaciรณn";
        mostrarToast( message, 'right', 'danger', 'ยกError!', true ); // Agrega tรญtulo aquรญ

        setTimeout(() => {
            commentRating.removeAttribute("disabled");
        }, 3000);

    } else {
      
    
        const dato = {
            IDCart,
            comment : commentV,
            rating : star
        }

        console.log("dato.............. :", dato); 
            
        fetch('/done_shoppingCart/registerCommentRatingToSell', {

            method: "post",
            body: JSON.stringify(dato),
            headers: {"content-type" : "application/json"}

            })
            .then(response => response.json())
            .then( jsonx => {
                console.log("jsonx :",  jsonx)
                const code = jsonx.code;
                const message = jsonx.message;
            
                if (code === "ok"){
                    mostrarToast( message, 'right', 'success', 'ยกHecho!', true ); // Agrega tรญtulo aquรญ

                    setTimeout(() => {
                        mostrarToast( 'ยกActualizando!', 'right', 'success', '', true ); // Agrega tรญtulo aquรญ

                        setTimeout(() => {
                            location.reload();    
                        }, 3000);

                    }, 1000);
                } else {
                    const message = "Ha habido un error, por favor ยกintente mรกs tarde!."
                    mostrarToast( message, 'right', 'danger', 'ยกError!', true ); // Agrega tรญtulo aquรญ

                    setTimeout(() => {
                        btnDecline.removeAttribute("disabled", "");
                        btnApprove.removeAttribute("disabled", "");
                    },5000);
                }    
                                
                
            })
            .catch( err => console.log(err))

    }        


})


</script>

<script>


    function mostrarToast(mensaje, posicion, color, titulo = '', conBotonCerrar = false) {
        // Configuraciรณn predeterminada
        toastr.options = {
            "closeButton": conBotonCerrar, // Agregar botรณn de cerrar si se solicita
            "debug": false,
            "newestOnTop": false,
            "progressBar": !conBotonCerrar, // Si tiene botรณn de cerrar, no mostrar barra de progreso
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "600",
            "hideDuration": "1000",
            "timeOut": conBotonCerrar ? false : "8000", // No se oculta automรกticamente si tiene botรณn de cerrar
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
  
        // Configurar la posiciรณn
        switch (posicion) {
            case 'center':
                toastr.options.positionClass = 'toast-top-center';
                break;
            case 'left':
                toastr.options.positionClass = 'toast-top-left';
                break;
            case 'right':
                toastr.options.positionClass = 'toast-top-right';
                break;
            default:
                toastr.options.positionClass = 'toast-top-right'; // Posiciรณn predeterminada
        }
  
        // Mostrar el mensaje segรบn el color especificado
        switch (color) {
            case 'success':
                titulo ? toastr.success(mensaje, titulo) : toastr.success(mensaje);
                break;
            case 'info':
                titulo ? toastr.info(mensaje, titulo) : toastr.info(mensaje);
                break;
            case 'warning':
                titulo ? toastr.warning(mensaje, titulo) : toastr.warning(mensaje);
                break;
            case 'danger':
                titulo ? toastr.error(mensaje, titulo) : toastr.error(mensaje);
                break;
            case 'primary':
                titulo ? toastr.info(mensaje, titulo, { toastClass: 'toast-primary' }) : toastr.info(mensaje, '', { toastClass: 'toast-primary' });
                break;
            case 'dark':
                titulo ? toastr.info(mensaje, titulo, { toastClass: 'toast-dark' }) : toastr.info(mensaje, '', { toastClass: 'toast-dark' });
                break;
            default:
                console.warn('Color no vรกlido. Usando el color por defecto (success).');
                titulo ? toastr.success(mensaje, titulo) : toastr.success(mensaje);
        }
    }
  
    //mostrarToast( response , 'right', 'danger', '', true ); // Agrega tรญtulo aquรญ
  
</script>
